- const getInputName = (f, property) =>  `${f.name}[${property}]`

mixin formFor(f, options = {})
  - const url = _.get(options, 'url');
  - const method = _.get(options, 'method', 'get').toLowerCase();
  - const isStandart = _.includes(['get', 'post'], method);
  form(action= url method= isStandart ? method : 'post')
    if !isStandart
      input(name='_method' type='hidden' value= method)
    block

mixin input(f, property, options = { as: 'text'})
  - const value = f.object[property] === undefined ? '' : f.object[property]
  .form-group(class=(f.errors[property] && 'has-danger'))
    label= property
    input.form-control(name= getInputName(f, property) type=options['as'] value=`${value}`)
    if f.errors[property]
      .form-control-feedback= f.errors[property].map(({ message }) => message).join('. ')

mixin textarea(f, property)
  - const value = f.object[property] === undefined ? '' : f.object[property]
  .form-group(class=(f.errors[property] && 'has-danger'))
    label= property
    textarea.form-control(name= getInputName(f, property))
      | #{value}
    if f.errors[property]
      .form-control-feedback= f.errors[property].map(({ message }) => message).join('. ')

mixin select(f, property, data, propertyData)
  - const valueId = f.object[property] === undefined ? '' : f.object[property].id
  - const valueData = f.object[property] === undefined ? '' : f.object[property][propertyData]
  .form-group(class= (f.errors[property] && 'has-danger'))
    label= property
    select.form-control.custom-selected(name= getInputName(f, property))
      option.selected(value= valueId)= valueData
      each elem in data
        option(value= elem.id)= elem[propertyData]        
    if f.errors[property]
      .form-control-feedback= f.errors[property].map(({ message }) => message).join('. ')
      
    mixin selectM(f, property)
      - const valueData = f.object[property] === undefined ? '' : f.object[property]
      .form-group(class= (f.errors[property] && 'has-danger'))
        label= property
        select.form-control(multiple name= getInputName(f, property))
          each elem in valueData
            option= elem.name       
        if f.errors[property]
          .form-control-feedback= f.errors[property].map(({ message }) => message).join('. ')
            
mixin button(f = 'Save', btClass = 'btn btn-primary', type = 'submit')
  .form-group
    input(class=btClass type=`${type}` value=f)
